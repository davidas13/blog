import json
import os
import re
import shutil
import sys

WEB_DIRPATH = os.getenv(
    "WEB_DIRPATH",
    "",
)
WEB_CONTENT_DIRPATH = os.path.join(
    WEB_DIRPATH,
    "content",
)
VAULT_DIRPATH = os.getenv(
    "VAULT_DIRPATH",
    "",
)
VAULT_PROPERTY_FILEPATH = os.path.join(
    VAULT_DIRPATH,
    ".obsidian",
    "types.json",
)
VAULT_EXCLUDE_DIRNAMES = os.getenv(
    "VAULT_EXCLUDE_DIRNAMES",
    "",
).split(",")

PUBLISH_TEMPLATE = """
---
title: [{title}]
tags: [{tags}]
aliases: [{aliases}]
date: {date}
description: {desciption} 
---

{content}

"""


# List of mandatory properties.
class Property:
    title = "title"
    publish = "publish"
    publish_location = "publish-location"


if __name__ == "__main__":
    entry_point_dirpaths = (
        WEB_CONTENT_DIRPATH,
        VAULT_DIRPATH,
    )

    for dirpath in entry_point_dirpaths:
        if not os.path.exists(dirpath):
            raise FileNotFoundError(
                "Directory path does not exist. "
                "(Directory path: {}) "
                "".format(
                    dirpath,
                )
            )

    vault_dirname_excludes = []

    with open(VAULT_PROPERTY_FILEPATH, "r") as file:
        types = json.load(file)

        if not types:
            types = {}

        properties = types.get("types", {})
        property_keys = "|".join(properties.keys())

    for root, dirnames, filenames in os.walk(VAULT_DIRPATH):
        root_dirname = os.path.basename(root)

        if (
            root_dirname.startswith((".",))
            or root_dirname.endswith(tuple(VAULT_EXCLUDE_DIRNAMES))
            or re.match(
                r".*\/({})($|\/.*)".format("|".join(vault_dirname_excludes)),
                root,
                re.IGNORECASE,
            )
        ):
            vault_dirname_excludes.append(root_dirname)

            continue

        for filename in filenames:
            filepath = os.path.join(root, filename)

            if not filepath.endswith((".md",)):
                continue

            with open(filepath, "r") as file:
                match = re.match(
                    r"^---([\s\S]+?)---",
                    file.read(),
                    re.IGNORECASE,
                )

                if match:
                    frontmatter_content = str(match.group(1))
                    frontmatter_data = {}

                    frontmatter_key = ""

                    for text in frontmatter_content.split("\n"):
                        if not text:
                            continue

                        match = re.match(
                            r"(?P<key>{})\:(?P<value>\s.+|\S)?".format(
                                property_keys,
                            ),
                            text,
                            re.IGNORECASE,
                        )

                        if match:
                            frontmatter_key = match.group("key") or ""
                            frontmatter_value = match.group("value") or ""
                            frontmatter_type = properties.get(frontmatter_key, "")

                            if frontmatter_key == Property.publish:
                                is_publish = bool(
                                    frontmatter_value.lower().strip()
                                    in (
                                        "true",
                                        "1",
                                    )
                                )
                                published_filepath = os.path.join(
                                    WEB_CONTENT_DIRPATH, filename
                                )

                                if os.path.exists(published_filepath):
                                    if not is_publish or os.path.getmtime(
                                        filepath
                                    ) > os.path.getmtime(published_filepath):
                                        pass
                                        # os.remove(published_filepath)

                                    if not is_publish:
                                        break

                                if is_publish:
                                    pass
                                    # shutil.copy2(filepath, published_filepath)
                                    print(filepath, published_filepath)

                                break

                        # NOTE: Uncomment the code below if you want to process the frontmatter.

                        #     if frontmatter_type in (
                        #         "tags",
                        #         "multitext",
                        #         "aliases",
                        #     ):
                        #         continue
                        #
                        #     frontmatter_data[frontmatter_key] = (
                        #         frontmatter_value.strip()
                        #     )
                        #
                        #     continue
                        #
                        # if frontmatter_key and frontmatter_type in (
                        #     "tags",
                        #     "multitext",
                        #     "aliases",
                        # ):
                        #     # Handle the frontmatter data if the frontmatter_key is either array or list type.
                        #     frontmatter_data[frontmatter_key] = frontmatter_data.get(
                        #         frontmatter_key,
                        #         [],
                        #     )
                        #     frontmatter_data[frontmatter_key].append(
                        #         text.replace("-", "").strip(),
                        #     )
